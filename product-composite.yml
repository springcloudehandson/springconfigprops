api:

  common:
    version: 1.0.0
    title: Product
    description: api
    termsOfServiceUrl:
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Contact
      url: My
      email: me@mail.com

  product-composite:
     get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a <b>404 - Not Found</b> error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned

     create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be splitted up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

     delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specificed productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing product will return <b>200 Ok</b>.


server.port: 7000
server.error.include-message: always
app:
  auth-server: localhost
  
spring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json


spring.cloud.stream:  
   defaultBinder: rabbit  
   default.contentType: application/json
   bindings:
    output-products:
      destination: products
    output-recommendations:
      destination: recommendations
    output-reviews:
      destination: reviews

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    
spring.application.name : "product-composite"

app.product-service.timeoutSec: 2

resilience4j.circuitbreaker:
  backends:
    product:
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 5
      failureRateThreshold: 50
      waitInterval: 10000
      ringBufferSizeInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - se.magnus.util.exceptions.InvalidInputException
        - se.magnus.util.exceptions.NotFoundException
        
resilience4j.retry:
  backends:
    product:
      maxRetryAttempts: 3
      waitDuration: 1000
      retryExceptions:
      - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError        
    
---
spring.profiles: docker

server.port: 8080
app.auth-server: authserver